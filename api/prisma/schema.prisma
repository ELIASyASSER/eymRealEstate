// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Post {

  id                 String      @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  price              Int
  images             String[]
  address            String
  city               String
  bedroom            Int
  bathroom           Int
  latitude           Float?
  longitude          Float?
  type               type
  property           property
  createdAt          DateTime    @default(now())
  user               User        @relation(fields: [userId], references: [id])
  userId             String      @db.ObjectId()
  postDetail         PostDetail?
  savedPosts         savedPosts[]

}

enum type {
  buy
  rent
}

enum property {
  appartment
  duplix
  house
  villa
}

model PostDetail {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId()
  desc       String
  utility    String?
  pet        String?
  fees       String?
  size       Int
  school     Int?
  bus        Int?
  restaurant Int?
  post       Post    @relation(fields: [postId], references: [id])
  postId     String  @unique @db.ObjectId
}
model savedPosts{
  id String @id @map("_id")  @default(auto())  @db.ObjectId 
  user User @relation(fields: [userId],references: [id])
  post Post @relation(fields: [postId],references: [id])
  postId String @db.ObjectId 
  userId String @db.ObjectId 
  createdAt  DateTime    @default(now())
  @@unique([postId,userId])
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  username  String   @unique
  password  String
  avatar    String?
  createdAt DateTime @default(now())
  posts     Post[]
  savedPosts savedPosts[]
  chats Chat[] @relation(fields: [chatIds],references: [id])
  chatIds String[] @db.ObjectId

}






model Chat{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  users User[] @relation(fields: [userIds],references: [id])
  userIds String[] @db.ObjectId
  seenBy String[] @db.ObjectId
  messages Message[]
  lastMessage  String?
}


model Message{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  text String
  userId String
  chat Chat @relation(fields: [chatId],references: [id])
  chatId String @db.ObjectId  
}